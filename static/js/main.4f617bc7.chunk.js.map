{"version":3,"sources":["InfoPanelWithoutAbout.js","InfoPanelWithAbout.js","InfoPanel.js","BrowseLinkBoxes.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["serverData","require","SiteTitle","self","this","id","className","onClick","e","props","onMenuBtnClick","React","Component","FilterForm","state","selectedTheme","updateSelectedTheme","bind","setState","target","value","name","onChange","required","map","theme","key","type","InfoPanelMenu","oldProps","document","getElementById","style","width","isOpen","href","toggleKnown","known","to","clearKnownLinks","InfoPanelWithoutAbout","toggleMenu","menuIsOpen","InfoPanelWithAbout","InfoPanel","aboutPage","BrowseLinkBox","shareLink","url","console","log","window","open","navigator","share","showLoader","text","title","then","hideLoader","catch","clipboard","writeText","newbie","pingAndOpen","ReactHtmlParser","description","remove","markAsKnownAndRemoveLink","Loader","displayLoader","BrowseLinkBoxes","themeLinkIdListMap","removeMethod","links","link","$","numLinks","knownLinksVarName","effortCount","Page","linkId","waitingForAjax","fetchableLinks","knownLinks","localStorage","JSON","parse","iota","getLinkFromServer","removeLink","isKnown","maxInt","list","i","push","addEventListener","innerHeight","scrollY","body","offsetHeight","filter","concat","slice","elt","getLinkIdToGet","get","async","success","l","newKnownLinks","newState","themeLinkIds","length","noKnownLinks","location","reload","App","path","Boolean","hostname","match","ReactDOM","render","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.4f617bc7.chunk.js","sourcesContent":["import React from 'react';\nimport  {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom';\nvar serverData = require('./serverData.json');\n\n// FilterForm.updateSelectedtheme is to be updated\n\nclass SiteTitle extends React.Component{\n    render() {\n        const self=this;\n        return (\n            <div id=\"site-title\">\n              <span id=\"site-title-text\" className=\"text-left\">KnowTNet</span>\n              <span id=\"site-title-spacer\" className=\"visible-small\" />\n              <i id=\"info-panel-menu-btn\"\n                 className=\"material-icons text-right visible-small\"\n                 onClick={(e)=>self.props.onMenuBtnClick()}\n                 >\n                menu\n              </i>\n            </div>\n        );   \n    }\n}\n\nclass FilterForm extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            selectedTheme: \"Select Theme\"\n        };\n        this.updateSelectedTheme = this.updateSelectedTheme.bind(this);\n    }\n    updateSelectedTheme(e){\n        this.setState({selectedTheme: e.target.value});\n    }\n    render(){\n        return (\n            <div id=\"filter-form\">\n              <select name=\"theme\" onChange={this.updateSelectedTheme}\n                      required>\n                <option value=\"\">Select Theme</option>\n                {serverData[\"theme-list\"].map(\n                    theme => {return <option value={theme} key={theme}>{theme}</option>;}\n                )}\n              </select>\n              <input type=\"submit\" id=\"filter-btn\"\n                     className=\"material-icons\"\n                     onClick={(e)=>this.props.updateSelectedTheme(this.state.selectedTheme)}\n                     value=\"search\"\n                     />\n            </div>\n        );\n    }\n}\n\nclass InfoPanelMenu extends React.Component {\n    constructor(props){\n        super(props);\n    }\n\n    componentDidUpdate(oldProps){\n        document.getElementById(\"info-panel-menu\").style.width\n            = this.props.isOpen ? \"80vw\" : \"0px\";\n    }\n    \n    render() {\n        return (\n            <div id=\"info-panel-menu\" >\n              <a href={serverData['front-page']}>Home</a>\n              <a id=\"toggle-known-btn\" onClick={this.props.toggleKnown}>\n                View {this.props.known ? \"Unknown\" : \"Known\"} Links</a>\n              <Link to={serverData['about-page']}>About Us</Link>\n              <div id=\"info-panel-spacer\"></div>\n              <a onClick={this.props.clearKnownLinks}>Clear Known Links</a>\n              <p id=\"ktn\" className=\"text-center\">Knowledge Transfer Network</p>\n            </div>\n        );\n    }\n}\n\nclass InfoPanelWithoutAbout extends React.Component {\n    constructor(props){\n        super(props);\n    }\n    render(props){\n        return (\n            <div id={this.props.id}>\n              <SiteTitle onMenuBtnClick={this.props.toggleMenu}/>\n              <FilterForm updateSelectedTheme={this.props.updateSelectedTheme}/>\n              <div id=\"username\" className=\"text-center\">Welcome to KnowTNet</div>\n              <InfoPanelMenu isOpen={this.props.menuIsOpen}\n                             toggleKnown={this.props.toggleKnown}\n                             known={this.props.known}\n                             clearKnownLinks={this.props.clearKnownLinks}/>\n            </div>\n        );   \n    }\n}\n\nexport default InfoPanelWithoutAbout;\n","import React from 'react';\nvar serverData = require('./serverData.json');\n\n// FilterForm.updateSelectedtheme is to be updated\n\nclass SiteTitle extends React.Component{\n    render() {\n        const self=this;\n        return (\n            <span>\n              <div id=\"site-title\" className=\"text-center\">\n                <span id=\"site-title-text\">KnowTNet</span>              \n              </div>\n              <p className=\"text-center\">\n                <a href={serverData[\"front-page\"]}>Go Back</a>\n              </p>\n            </span>\n        );   \n    }\n}\nclass InfoPanelWithAbout extends React.Component {\n    render(props){\n        return (\n            <div id={this.props.id}>\n              <SiteTitle/>\n            </div>\n        );   \n    }\n}\n\nexport default InfoPanelWithAbout;\n","import React from 'react';\nimport InfoPanelWithoutAbout from './InfoPanelWithoutAbout';\nimport InfoPanelWithAbout from './InfoPanelWithAbout';\n\nfunction InfoPanel(props) {\n    if (props.aboutPage == null) return (\n        <InfoPanelWithoutAbout id={props.id}\n                               updateSelectedTheme={props.updateSelectedTheme}\n                               updateSelectedTheme={props.updateSelectedTheme}\n                               toggleKnown={props.toggleKnown}\n                               known={props.known}\n                               toggleMenu={props.toggleMenu}\n                               menuIsOpen={props.menuIsOpen}\n                               clearKnownLinks={props.clearKnownLinks}\n                               />\n    );\n    else return (\n        <InfoPanelWithAbout id={props.id}/>\n    );\n}\n\nexport default InfoPanel;\n","import React from 'react';\nimport ReactHtmlParser from 'react-html-parser';\nvar serverData = require('./serverData.json');\n\nclass BrowseLinkBox extends React.Component{\n    constructor(props){\n        super(props);\n        this.shareLink = this.shareLink.bind(this);\n    }\n    pingAndOpen(url){\n        console.log(url);\n        window.open(url);\n    }\n    shareLink(url){\n        if (navigator.share){\n            this.props.showLoader();\n            navigator\n                .share({\n                    text: this.props.title,\n                    url: this.props.url\n                })\n                .then(this.props.hideLoader)\n                .catch((e)=>{\n                    console.log(e);\n                    this.props.hideLoader();\n                });\n        }else{\n            navigator.clipboard\n                .writeText(this.props.url)\n                .then(()=>{}, (e)=>console.log(e));\n        }\n    }\n\n    render(props){\n        // console.log(this.props.remove);\n        return (\n            <div className=\"link-box\">\n              <div className=\"link-url\">\n                <a href={this.props.url} target=\"_blank\">{this.props.title}</a>\n              </div>\n              <div className=\"link-theme\">{this.props.theme}</div>\n              <div className=\"link-level\">{this.props.newbie ? \"Newbie\" : \"\"}</div>\n              <br/>\n              <div className=\"link-description\"\n                   onClick={(e)=>this.pingAndOpen(this.props.url)}\n                   target=\"_blank\">\n                <div className=\"read-more\">\n                  <span className=\"read-more-text\">\n                    READ MORE\n                  </span>\n                </div>\n                <div className=\"description-contents\">\n                  {ReactHtmlParser(this.props.description)}\n                </div>\n              </div>\n              <div className=\"link-actions\">\n                <div className=\"link-action\"\n                     onClick={(e) => this.props.remove(this)}\n                  >\n                  IGNORE\n                  <br/>\n                  for now\n                </div>\n                <div className=\"link-action\"\n                     onClick={(e) => this.props.markAsKnownAndRemoveLink(this)}>\n                  MARK\n                  <br/>\n                  as known\n                </div>\n                <div className=\"link-share\">\n                  <i className=\"material-icons-outlined link-share-icon\"\n                     onClick={(e)=>this.shareLink(this.props.url)}>\n                    share\n                    <span className=\"link-share-tooltip\">COPY LINK</span>\n                  </i>\n                </div>\n              </div>\n            </div>\n        );\n        \n    }\n}\n\nclass Loader extends React.Component{\n    render(){\n        return (\n            this.props.displayLoader\n                ? <div id=\"loader-background\"><div id=\"loader\"/></div>\n                : null\n        );   \n    }\n}\n\nclass BrowseLinkBoxes extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            themeLinkIdListMap: serverData['theme-link-id-list-map'],\n            displayLoader: false\n        };\n        this.showLoader = this.showLoader.bind(this);\n        this.hideLoader = this.hideLoader.bind(this);\n    }\n    showLoader() {\n        this.setState({displayLoader: true});\n    };\n    hideLoader(){\n        this.setState({displayLoader: false});\n    }\n    render(props){\n        const removeMethod = this.props.remove;\n        const markAsKnownAndRemoveLink = this.props.markAsKnownAndRemoveLink;\n        const self=this;\n        return(\n            <div id={this.props.id}>\n              <Loader displayLoader={this.state.displayLoader}/>\n              {this.props.links.map(function(link){\n                  // console.log(link);\n                  return (\n                      <BrowseLinkBox id={link.id}\n                                     url={link.url}\n                                     title={link.title}\n                                     description={link.description}\n                                     newbie={link[\"newbie-p\"]}\n                                     key={link.id}\n                                     theme={link.theme}\n                                     remove={removeMethod}\n                                     markAsKnownAndRemoveLink={markAsKnownAndRemoveLink}\n                                     showLoader={self.showLoader}\n                                     hideLoader={self.hideLoader}/>\n                  );    \n              })}\n            </div>\n        );\n    }\n}\n\nexport default BrowseLinkBoxes;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport InfoPanel from './InfoPanel';\nimport BrowseLinkBoxes from './BrowseLinkBoxes';\nimport logo from './logo.svg';\nimport ReactHtmlParser from 'react-html-parser';\nimport './App.css';\n\nvar $ = require('jquery');\nvar serverData = require('./serverData.json');\nconst numLinks = serverData[\"num-links\"];\nconst knownLinksVarName= \"known\";\nconst themeLinkIdListMap = serverData[\"theme-link-id-list-map\"];\nvar effortCount = 2; // try twice to make scrollable\n\nclass Page extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            links: [],\n            linkId: 1,\n            waitingForAjax:null,\n            fetchableLinks:[],\n            knownLinks: (\n                localStorage[knownLinksVarName]\n                    ? JSON.parse(\"[\"+localStorage[knownLinksVarName] + \"]\")\n                    : this.iota(1+numLinks).map((id) => 0)\n            ),\n            known:false,\n            selectedTheme:\"Select Theme\",\n            menuIsOpen:false\n        };\n        console.log(this.state);\n        this.getLinkFromServer = this.getLinkFromServer.bind(this);\n        this.removeLink = this.removeLink.bind(this);\n        this.markAsKnownAndRemoveLink = this.markAsKnownAndRemoveLink.bind(this);\n        this.updateSelectedTheme = this.updateSelectedTheme.bind(this);\n        this.isKnown = this.isKnown.bind(this);\n        this.toggleKnown = this.toggleKnown.bind(this);\n        this.toggleMenu = this.toggleMenu.bind(this);\n        this.clearKnownLinks = this.clearKnownLinks.bind(this);\n    }\n    iota(maxInt){\n        var list = [];\n        for(var i=0; i<maxInt; i++) list.push(i);\n        return list;\n    }\n    componentDidMount(){\n        window.addEventListener(\n            'scroll',\n            () => {\n                if ((window.innerHeight + window.scrollY)\n                    >= document.body.offsetHeight\n                    && !this.state.waitingForAjax){\n                    this.getLinkFromServer();\n                }\n            }\n        );\n        this.state.fetchableLinks = this.iota(1+numLinks).filter(\n            id => !this.state.knownLinks[id]\n        );\n        window.addEventListener(\n            'load',\n            () => {\n                console.log('loaded');\n                this.getLinkFromServer();\n            }\n        );\n        console.log(this.state);\n    }\n    getLinkIdToGet(){\n        const id = this.state.fetchableLinks[1];\n        this.setState({fetchableLinks: [0].concat(this.state.fetchableLinks.slice(2))});\n        return id;\n    }\n    getLinkFromServer(){\n        const elt = this; // success function requires this | pun intended :)\n        const id = this.getLinkIdToGet();\n        if (!id) return;\n        console.log(\"id\", id);\n        this.state.waitingForAjax = true;\n        $.get({\n            url: \"data/\" + id,\n            async: null,\n            success: function(link){\n                console.log(link);\n                link = JSON.parse(link);\n                elt.setState({links: [...elt.state.links, link]});\n            }\n        });\n        this.state.waitingForAjax = null;\n    }\n    removeLink(link){\n        this.setState({links: this.state.links.filter((l) => !l==link)});\n    }\n    markAsKnownAndRemoveLink(link){\n        console.log(link);\n        const newKnownLinks = this.iota(1+numLinks).map((id) => {\n            if (link.props.id == id) return 1;\n            else return this.state.knownLinks[id];\n        });\n        localStorage[knownLinksVarName] = newKnownLinks;\n        const newState = {\n            knownLinks: newKnownLinks,\n            links: this.state.links.filter((l) => !(l[\"id\"] === link.props.id))\n        };\n        this.setState(newState);\n    }\n    isKnown(id){return this.state.knownLinks[id];}\n    updateSelectedTheme(theme, known = this.state.known){\n        var themeLinkIds = themeLinkIdListMap[theme];\n        var newState = {};\n        console.log('known', known);\n        if (themeLinkIds){\n            newState = {\n                links: [],\n                fetchableLinks: [0].concat(themeLinkIds.filter((id)=> {\n                    return (this.isKnown(id) && known)\n                        || (!this.isKnown(id) && !known);\n                })),\n                selectedTheme: theme\n            };\n        }else{\n            newState = {\n                links: [],\n                fetchableLinks: [0].concat(this.iota(1+numLinks).slice(1).filter((id)=> {\n                    return (this.isKnown(id) && known)\n                        || (!this.isKnown(id) && !known);\n                })),\n                selectedTheme: theme\n            };\n        }\n        this.setState(newState);\n    }\n    componentDidUpdate(){\n        if (effortCount && this.state.links.length < 2){\n            console.log(this.state);\n            this.getLinkFromServer();\n            effortCount--;\n        }else{\n            effortCount = 2;\n        }\n    }\n    \n    toggleKnown(){\n        this.setState({known:!this.state.known, menuIsOpen:!this.state.menuIsOpen});\n        this.updateSelectedTheme(this.state.selectedTheme, !this.state.known);\n    }\n    toggleMenu(){\n        this.setState({menuIsOpen: !this.state.menuIsOpen});\n    }\n    clearKnownLinks(){\n        const noKnownLinks = this.iota(1+numLinks).map((id) => 0)\n        localStorage[knownLinksVarName] = noKnownLinks;\n        this.setState({knownLinks: noKnownLinks});\n        window.location.reload();\n    }\n    render(props){\n        console.log(this.props);\n        console.log(\"about\", this.props.aboutPage);\n        return (\n            <div>\n              <InfoPanel\n                aboutPage={this.props.aboutPage}\n                id=\"responsive-info-panel\"\n                updateSelectedTheme={this.updateSelectedTheme}\n                toggleKnown={this.toggleKnown}\n                known={this.state.known}\n                toggleMenu={this.toggleMenu}\n                menuIsOpen={this.state.menuIsOpen}\n                clearKnownLinks={this.clearKnownLinks}\n                />\n              {this.props.aboutPage\n                  ? ReactHtmlParser(this.props.aboutPage)\n                  : (\n                      <span>\n                        <br/>\n                        <br/>\n                        <br/>\n                        <br/>\n                        <BrowseLinkBoxes\n                          id=\"responsive-browse-link-boxes\"\n                          links={this.state.links}\n                          remove={this.removeLink}\n                          markAsKnownAndRemoveLink={this.markAsKnownAndRemoveLink}\n                          />\n                      </span>\n                  )\n              }\n            </div>\n        );\n    }\n}\n\nclass App extends React.Component{\n    render(){\n        return (\n            <Router>\n              <Switch>\n                <Route path={\"/\"+serverData[\"about-page\"]}>\n                  <Page aboutPage={serverData[\"about\"]}/>\n                </Route>\n                <Route path=\"/\">\n                  <Page aboutPage={null}/>\n                </Route>\n              </Switch>\n            </Router>\n        );\n    }\n    \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}